# app.py

import streamlit as st
import random

# ================== НОВАЯ БАЗА ДАННЫХ ИЗ PDF-ФАЙЛА ==================
# Данные взяты из документа "химия формулы.pdf" 
chemical_data_full = {
    "Ароматические и сопряженные системы": {
        "Бензол": {"молекулярная": "C6H6", "структурная": "C6H6", "факт": "Простейший ароматический углеводород."},
        "Фенол": {"молекулярная": "C6H5OH", "структурная": "C6H5-OH", "факт": "Проявляет слабые кислотные свойства."},
        "Анилин": {"молекулярная": "C6H5NH2", "структурная": "C6H5-NH2", "факт": "Основание для синтеза многих красителей."},
        "Нафталин": {"молекулярная": "C10H8", "структурная": "C10H8 (два кольца)", "факт": "Раньше использовался как средство от моли."},
        "Антрацен": {"молекулярная": "C14H10", "структурная": "C14H10 (три кольца линейно)", "факт": "Используется в производстве красителя ализарина."},
        "Фенантрен": {"молекулярная": "C14H10", "структурная": "C14H10 (три кольца нелинейно)", "факт": "Структурный фрагмент стероидов."},
        "Пиррол": {"молекулярная": "C4H5N", "структурная": "C4H5N (гетероцикл)", "факт": "Входит в состав гемоглобина и хлорофилла."},
        "Фуран": {"молекулярная": "C4H4O", "структурная": "C4H4O (гетероцикл)", "факт": "Его производное, фурфурол, пахнет свежим ржаным хлебом."},
        "Тиофен": {"молекулярная": "C4H4S", "структурная": "C4H4S (гетероцикл)", "факт": "Часто сопутствует бензолу в каменноугольной смоле."},
        "Пиридин": {"молекулярная": "C5H5N", "структурная": "C5H5N (гетероцикл)", "факт": "Обладает неприятным запахом, является основанием."},
        "Пурин": {"молекулярная": "C5H4N4", "структурная": "C5H4N4 (два кольца)", "факт": "Основа для аденина и гуанина в ДНК и РНК."}
    },
    "Спирты": {
        "Метанол": {"молекулярная": "CH4O", "структурная": "CH3-OH", "факт": "Сильный яд, вызывает слепоту и смерть."},
        "Этанол": {"молекулярная": "C2H6O", "структурная": "CH3-CH2-OH", "факт": "Получают спиртовым брожением углеводов."},
        "Этиленгликоль": {"молекулярная": "C2H6O2", "структурная": "HO-CH2-CH2-OH", "факт": "Основной компонент автомобильных антифризов."},
        "Глицерин": {"молекулярная": "C3H8O3", "структурная": "CH2(OH)-CH(OH)-CH2(OH)", "факт": "Трехатомный спирт, используется в косметике и пищевой промышленности."},
        "Инозит": {"молекулярная": "C6H12O6", "структурная": "C6H6(OH)6 (цикл)", "факт": "Витаминоподобное вещество, иногда называют витамином B8."}
    },
    "Альдегиды и Кетоны": {
        "Метаналь (Формальдегид)": {"молекулярная": "CH2O", "структурная": "H-CHO", "факт": "Водный раствор (формалин) используется для консервации биологических материалов."},
        "Этаналь (Ацетальдегид)": {"молекулярная": "C2H4O", "структурная": "CH3-CHO", "факт": "Промежуточный продукт метаболизма этанола в организме."},
        "Пропеналь (Акролеин)": {"молекулярная": "C3H4O", "структурная": "CH2=CH-CHO", "факт": "Обладает резким запахом, образуется при подгорании жиров."},
        "Бензальдегид": {"молекулярная": "C7H6O", "структурная": "C6H5-CHO", "факт": "Придает характерный запах горького миндаля."},
        "Ацетон": {"молекулярная": "C3H6O", "структурная": "CH3-CO-CH3", "факт": "Простейший кетон, используется как растворитель."}
    },
    "Карбоновые кислоты": {
        "Муравьиная кислота": {"молекулярная": "CH2O2", "структурная": "HCOOH", "факт": "Содержится в яде муравьев и в крапиве."},
        "Уксусная кислота": {"молекулярная": "C2H4O2", "структурная": "CH3-COOH", "факт": "Продукт скисания вина, основной компонент уксуса."},
        "Масляная кислота": {"молекулярная": "C4H8O2", "структурная": "CH3-CH2-CH2-COOH", "факт": "Придает запах прогорклому сливочному маслу."},
        "Щавелевая кислота": {"молекулярная": "C2H2O4", "структурная": "HOOC-COOH", "факт": "Сильная дикарбоновая кислота, содержится в щавеле и ревене."},
        "Янтарная кислота": {"молекулярная": "C4H6O4", "структурная": "HOOC-CH2-CH2-COOH", "факт": "Участник цикла Кребса, важный метаболит."},
        "Олеиновая кислота": {"молекулярная": "C18H34O2", "структурная": "C17H33COOH", "факт": "Ненасыщенная жирная кислота, основная составляющая оливкового масла."},
        "Молочная кислота": {"молекулярная": "C3H6O3", "структурная": "CH3-CH(OH)-COOH", "факт": "Образуется в мышцах при физической нагрузке и при скисании молока."},
        "Лимонная кислота": {"молекулярная": "C6H8O7", "структурная": "HOOC-CH2-C(OH)(COOH)-CH2-COOH", "факт": "Содержится в цитрусовых, используется как пищевая добавка (E330)."},
        "Пировиноградная кислота (ПВК)": {"молекулярная": "C3H4O3", "структурная": "CH3-CO-COOH", "факт": "Ключевой продукт гликолиза, связывает метаболизм углеводов, жиров и белков."}
    },
    "Аминокислоты": {
        "Глицин (Гли)": {"молекулярная": "C2H5NO2", "структурная": "H2N-CH2-COOH", "факт": "Простейшая аминокислота, не имеет оптических изомеров."},
        "Аланин (Ала)": {"молекулярная": "C3H7NO2", "структурная": "CH3-CH(NH2)-COOH", "факт": "Одна из наиболее распространенных аминокислот в белках."},
        "Валин (Вал)": {"молекулярная": "C5H11NO2", "структурная": "(CH3)2-CH-CH(NH2)-COOH", "факт": "Незаменимая аминокислота с разветвленной цепью."},
        "Лейцин (Лей)": {"молекулярная": "C6H13NO2", "структурная": "(CH3)2-CH-CH2-CH(NH2)-COOH", "факт": "Незаменимая аминокислота, важна для построения мышц."},
        "Цистеин (Цис)": {"молекулярная": "C3H7NO2S", "структурная": "HS-CH2-CH(NH2)-COOH", "факт": "Содержит серу, способен образовывать дисульфидные мостики в белках."},
        "Метионин (Мет)": {"молекулярная": "C5H11NO2S", "структурная": "CH3-S-(CH2)2-CH(NH2)-COOH", "факт": "Незаменимая серосодержащая аминокислота."},
        "Фенилаланин (Фен)": {"молекулярная": "C9H11NO2", "структурная": "C6H5-CH2-CH(NH2)-COOH", "факт": "Ароматическая незаменимая аминокислота."},
        "Триптофан (Три)": {"молекулярная": "C11H12N2O2", "структурная": "(C8H6N)-CH2-CH(NH2)-COOH", "факт": "Предшественник нейромедиатора серотонина («гормона счастья»)."},
        "Пролин (Про)": {"молекулярная": "C5H9NO2", "структурная": "C4H8N-COOH (цикл)", "факт": "Иминокислота, создает изгибы в полипептидных цепях белков."}
    },
    "Углеводы и азотистые основания": {
        "D-глюкоза": {"молекулярная": "C6H12O6", "структурная": "C6H12O6", "факт": "Основной источник энергии для живых организмов, «виноградный сахар»."},
        "D-фруктоза": {"молекулярная": "C6H12O6", "структурная": "C6H12O6", "факт": "Кетосахар, содержится во фруктах и меде."},
        "D-рибоза": {"молекулярная": "C5H10O5", "структурная": "C5H10O5", "факт": "Входит в состав РНК и АТФ."},
        "Сахароза": {"молекулярная": "C12H22O11", "структурная": "C12H22O11", "факт": "Тростниковый или свекловичный сахар, состоит из глюкозы и фруктозы."},
        "Аденин (А)": {"молекулярная": "C5H5N5", "структурная": "C5H5N5", "факт": "Пуриновое основание, в ДНК комплементарен Тимину (Т)."},
        "Гуанин (Г)": {"молекулярная": "C5H5N5O", "структурная": "C5H5N5O", "факт": "Пуриновое основание, в ДНК комплементарен Цитозину (Ц)."},
        "Цитозин (Ц)": {"молекулярная": "C4H5N3O", "структурная": "C4H5N3O", "факт": "Пиримидиновое основание, входит в состав ДНК и РНК."},
        "Тимин (Т)": {"молекулярная": "C5H6N2O2", "структурная": "C5H6N2O2", "факт": "Пиримидиновое основание, присутствует только в ДНК."},
        "Урацил (У)": {"молекулярная": "C4H4N2O2", "структурная": "C4H4N2O2", "факт": "Пиримидиновое основание, заменяет Тимин в РНК."}
    },
    "Лекарства и биорегуляторы": {
        "Аспирин": {"молекулярная": "C9H8O4", "структурная": "CH3COO-C6H4-COOH", "факт": "Ацетилсалициловая кислота, обладает жаропонижающим и противовоспалительным действием."},
        "Новокаин": {"молекулярная": "C13H20N2O2", "структурная": "NH2-C6H4-COO-CH2-CH2-N(C2H5)2", "факт": "Местный анестетик, используется в стоматологии."},
        "Адреналин": {"молекулярная": "C9H13NO3", "структурная": "(HO)2-C6H3-CH(OH)-CH2-NH(CH3)", "факт": "Гормон «бей или беги», выделяется надпочечниками в стрессовых ситуациях."},
        "Гистамин": {"молекулярная": "C5H9N3", "структурная": "(C3H3N2)-CH2-CH2-NH2", "факт": "Медиатор аллергических реакций немедленного типа."},
        "Холестерин": {"молекулярная": "C27H46O", "структурная": "C27H46O (стероид)", "факт": "Входит в состав клеточных мембран, предшественник стероидных гормонов."},
        "Витамин А (ретинол)": {"молекулярная": "C20H30O", "структурная": "C20H29OH", "факт": "Необходим для зрения и роста костей."}
    }
}
# =====================================================================

# --- Инициализация состояния сессии ---
if 'answered_questions' not in st.session_state:
    st.session_state.answered_questions = []
if 'current_question' not in st.session_state:
    st.session_state.current_question = None
if 'show_answer' not in st.session_state:
    st.session_state.show_answer = False
if 'game_mode' not in st.session_state:
    st.session_state.game_mode = "Стандартный (Название -> Формула)"

def reset_game(category, mode):
    """Сбрасывает игру для выбранной категории и режима."""
    st.session_state.answered_questions = []
    st.session_state.game_mode = mode
    get_new_question(category)
    st.session_state.show_answer = False

def get_new_question(category):
    """Генерирует новый, еще не заданный вопрос."""
    st.session_state.show_answer = False
    
    full_list = list(chemical_data_full[category].keys())
    unanswered_list = [q for q in full_list if q not in st.session_state.answered_questions]
    
    if not unanswered_list:
        st.session_state.current_question = None # Вопросы кончились
        return
        
    compound_name = random.choice(unanswered_list)
    formulas = chemical_data_full[category][compound_name]
    formula_type = random.choice(["молекулярная", "структурная"])
    formula_string = formulas[formula_type]

    st.session_state.current_question = {
        "name": compound_name,
        "formula_type": formula_type,
        "formula": formula_string,
        "fact": formulas["факт"]
    }

# --- Интерфейс приложения ---

st.set_page_config(layout="wide")
st.title("🧪 Тренажер по биоорганической химии")

# --- Боковая панель ---
with st.sidebar:
    st.title("Настройки игры")
    
    # Получаем список категорий из нашей новой базы данных
    categories = list(chemical_data_full.keys())
    selected_category = st.selectbox(
        "1. Выберите категорию:",
        categories,
        index=0 # По умолчанию выбрана первая категория
    )
    
    selected_mode = st.radio(
        "2. Выберите режим:",
        ["Стандартный (Название -> Формула)", "Обратный (Формула -> Название)"],
        key="game_mode_selector"
    )

    if st.button("Начать / Сбросить игру", use_container_width=True):
        reset_game(selected_category, selected_mode)
        st.rerun()

# --- Основная часть экрана ---
if not st.session_state.current_question:
    st.info("Добро пожаловать! Выберите категорию и режим в меню слева, затем нажмите 'Начать / Сбросить игру'.")
else:
    col1, col2 = st.columns([2, 1.5])

    with col1:
        q = st.session_state.current_question
        mode = st.session_state.game_mode
        
        if mode == "Стандартный (Название -> Формула)":
            st.write(f"Введите **{q['formula_type']}** формулу для соединения:")
            st.info(f"## {q['name']}")
            correct_answer = q['formula']
        else: # Обратный режим
            st.write(f"Введите **название** соединения для формулы:")
            st.info(f"## `{q['formula']}`")
            correct_answer = q['name']

        user_answer = st.text_input("Ваш ответ:", key="user_input", disabled=st.session_state.show_answer)

        if st.button("Проверить", disabled=st.session_state.show_answer, use_container_width=True):
            cleaned_user = user_answer.strip().upper().replace("-", "")
            # Для обратного режима не убираем дефисы из названия
            if mode == "Обратный (Формула -> Название)":
                 cleaned_correct = correct_answer.strip().upper()
            else:
                 cleaned_correct = correct_answer.strip().upper().replace("-", "")
            
            if cleaned_user == cleaned_correct:
                st.success("✅ Правильно!")
                if q['name'] not in st.session_state.answered_questions:
                    st.session_state.answered_questions.append(q['name'])
            else:
                st.error(f"❌ Неверно. Правильный ответ: **{correct_answer}**")
            
            st.session_state.show_answer = True
            st.rerun()

        if st.session_state.show_answer:
            st.markdown(f"**💡 Интересный факт:** {q['fact']}")
            if st.button("Следующий вопрос", use_container_width=True):
                get_new_question(selected_category)
                st.rerun()

    with col2:
        st.subheader("Ваш прогресс")
        total_questions = len(chemical_data_full[selected_category])
        answered_count = len(st.session_state.answered_questions)
        
        score = answered_count
        st.metric(label="Правильных ответов", value=f"{score} из {total_questions}")
        
        if total_questions > 0:
            progress = answered_count / total_questions
            st.progress(progress, text=f"{progress:.0%} пройдено")

            if answered_count == total_questions:
                st.balloons()
                st.success("Поздравляем! Вы изучили всю категорию!")
