# app.py

import streamlit as st
import random
from rdkit import Chem
from streamlit_ketcher import st_ketcher

# ================== –ë–ê–ó–ê –î–ê–ù–ù–´–• –°–û SMILES –ò –§–ê–ö–¢–ê–ú–ò ==================
chemical_data_full = {
    "–ê—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã": {
        "–ë–µ–Ω–∑–æ–ª": {"–º–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è": "C6H6", "—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è": "C6H6", "smiles": "c1ccccc1", "—Ñ–∞–∫—Ç": "–ü—Ä–æ—Å—Ç–µ–π—à–∏–π –∞—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —É–≥–ª–µ–≤–æ–¥–æ—Ä–æ–¥."},
        "–§–µ–Ω–æ–ª": {"–º–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è": "C6H6O", "—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è": "C6H5-OH", "smiles": "c1ccc(O)cc1", "—Ñ–∞–∫—Ç": "–ü—Ä–æ—è–≤–ª—è–µ—Ç —Å–ª–∞–±—ã–µ –∫–∏—Å–ª–æ—Ç–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞."},
        "–ê–Ω–∏–ª–∏–Ω": {"–º–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è": "C6H7N", "—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è": "C6H5-NH2", "smiles": "c1ccc(N)cc1", "—Ñ–∞–∫—Ç": "–û—Å–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ –º–Ω–æ–≥–∏—Ö –∫—Ä–∞—Å–∏—Ç–µ–ª–µ–π."},
        "–ù–∞—Ñ—Ç–∞–ª–∏–Ω": {"–º–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è": "C10H8", "—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è": "C10H8 (–¥–≤–∞ –∫–æ–ª—å—Ü–∞)", "smiles": "c1ccc2ccccc2c1", "—Ñ–∞–∫—Ç": "–†–∞–Ω—å—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫–∞–∫ —Å—Ä–µ–¥—Å—Ç–≤–æ –æ—Ç –º–æ–ª–∏."},
    },
    "–°–ø–∏—Ä—Ç—ã": {
        "–ú–µ—Ç–∞–Ω–æ–ª": {"–º–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è": "CH4O", "—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è": "CH3-OH", "smiles": "CO", "—Ñ–∞–∫—Ç": "–°–∏–ª—å–Ω—ã–π —è–¥, –≤—ã–∑—ã–≤–∞–µ—Ç —Å–ª–µ–ø–æ—Ç—É –∏ —Å–º–µ—Ä—Ç—å."},
        "–≠—Ç–∞–Ω–æ–ª": {"–º–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è": "C2H6O", "—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è": "CH3-CH2-OH", "smiles": "CCO", "—Ñ–∞–∫—Ç": "–ü–æ–ª—É—á–∞—é—Ç —Å–ø–∏—Ä—Ç–æ–≤—ã–º –±—Ä–æ–∂–µ–Ω–∏–µ–º —É–≥–ª–µ–≤–æ–¥–æ–≤."},
        "–ì–ª–∏—Ü–µ—Ä–∏–Ω": {"–º–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è": "C3H8O3", "—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è": "C(O)C(O)CO", "smiles": "C(C(CO)O)O", "—Ñ–∞–∫—Ç": "–¢—Ä–µ—Ö–∞—Ç–æ–º–Ω—ã–π —Å–ø–∏—Ä—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ—Å–º–µ—Ç–∏–∫–µ."},
    },
    "–ö–∞—Ä–±–æ–Ω–æ–≤—ã–µ –∫–∏—Å–ª–æ—Ç—ã": {
        "–£–∫—Å—É—Å–Ω–∞—è –∫–∏—Å–ª–æ—Ç–∞": {"–º–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è": "C2H4O2", "—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è": "CH3-COOH", "smiles": "CC(=O)O", "—Ñ–∞–∫—Ç": "–ü—Ä–æ–¥—É–∫—Ç —Å–∫–∏—Å–∞–Ω–∏—è –≤–∏–Ω–∞, –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —É–∫—Å—É—Å–∞."},
        "–ú–æ–ª–æ—á–Ω–∞—è –∫–∏—Å–ª–æ—Ç–∞": {"–º–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è": "C3H6O3", "—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è": "CH3-CH(OH)-COOH", "smiles": "CC(C(=O)O)O", "—Ñ–∞–∫—Ç": "–û–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ –º—ã—à—Ü–∞—Ö –ø—Ä–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ."},
        "–ê—Å–ø–∏—Ä–∏–Ω": {"–º–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è": "C9H8O4", "—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è": "CH3COO-C6H4-COOH", "smiles": "CC(=O)OC1=CC=CC=C1C(=O)O", "—Ñ–∞–∫—Ç": "–ê—Ü–µ—Ç–∏–ª—Å–∞–ª–∏—Ü–∏–ª–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞, –∂–∞—Ä–æ–ø–æ–Ω–∏–∂–∞—é—â–µ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ."},
    },
    "–ê–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç—ã": {
        "–ì–ª–∏—Ü–∏–Ω": {"–º–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è": "C2H5NO2", "—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è": "H2N-CH2-COOH", "smiles": "C(C(=O)O)N", "—Ñ–∞–∫—Ç": "–ü—Ä–æ—Å—Ç–µ–π—à–∞—è –∞–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç–∞."},
        "–ê–ª–∞–Ω–∏–Ω": {"–º–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è": "C3H7NO2", "—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è": "CH3-CH(NH2)-COOH", "smiles": "CC(C(=O)O)N", "—Ñ–∞–∫—Ç": "–û–¥–Ω–∞ –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç –≤ –±–µ–ª–∫–∞—Ö."},
        "–§–µ–Ω–∏–ª–∞–ª–∞–Ω–∏–Ω": {"–º–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è": "C9H11NO2", "—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è": "C6H5-CH2-CH(NH2)-COOH", "smiles": "c1ccc(CC(C(=O)O)N)cc1", "—Ñ–∞–∫—Ç": "–ê—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ–∑–∞–º–µ–Ω–∏–º–∞—è –∞–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç–∞."},
    },
    "–ê–∑–æ—Ç–∏—Å—Ç—ã–µ –æ—Å–Ω–æ–≤–∞–Ω–∏—è": {
        "–ê–¥–µ–Ω–∏–Ω": {"–º–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è": "C5H5N5", "—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è": "C5H5N5", "smiles": "c1nc(N)c2nc[nH]c2n1", "—Ñ–∞–∫—Ç": "–ü—É—Ä–∏–Ω–æ–≤–æ–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤ –î–ù–ö –∏ –†–ù–ö."},
        "–£—Ä–∞—Ü–∏–ª": {"–º–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è": "C4H4N2O2", "—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è": "C4H4N2O2", "smiles": "c1cc(O)nc(O)[nH]1", "—Ñ–∞–∫—Ç": "–ü–∏—Ä–∏–º–∏–¥–∏–Ω–æ–≤–æ–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –†–ù–ö."}
    }
}
# =====================================================================

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ ---
if 'answered_questions' not in st.session_state:
    st.session_state.answered_questions = []
if 'current_question' not in st.session_state:
    st.session_state.current_question = None
if 'show_answer' not in st.session_state:
    st.session_state.show_answer = False
if 'game_mode' not in st.session_state:
    st.session_state.game_mode = "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (–ù–∞–∑–≤–∞–Ω–∏–µ -> –§–æ—Ä–º—É–ª–∞)"

def compare_smiles(smiles1, smiles2):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ SMILES, –ø—Ä–∏–≤–æ–¥—è –∏—Ö –∫ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–º—É –≤–∏–¥—É."""
    if not smiles1 or not smiles2:
        return False
    mol1 = Chem.MolFromSmiles(smiles1)
    mol2 = Chem.MolFromSmiles(smiles2)
    if mol1 is None or mol2 is None:
        return False
    canon_smiles1 = Chem.MolToSmiles(mol1, canonical=True)
    canon_smiles2 = Chem.MolToSmiles(mol2, canonical=True)
    return canon_smiles1 == canon_smiles2

def reset_game(category, mode):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–≥—Ä—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ä–µ–∂–∏–º–∞."""
    st.session_state.answered_questions = []
    st.session_state.game_mode = mode
    get_new_question(category)
    st.session_state.show_answer = False

def get_new_question(category):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π, –µ—â–µ –Ω–µ –∑–∞–¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å."""
    st.session_state.show_answer = False
    full_list = list(chemical_data_full[category].keys())
    unanswered_list = [q for q in full_list if q not in st.session_state.answered_questions]
    if not unanswered_list:
        st.session_state.current_question = None
        return
    compound_name = random.choice(unanswered_list)
    data = chemical_data_full[category][compound_name]
    formula_type = random.choice(["–º–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è", "—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è"])
    
    st.session_state.current_question = {
        "name": compound_name,
        "formula_type": formula_type,
        "formula": data.get("formula", ""), # –ò—Å–ø–æ–ª—å–∑—É–µ–º .get() –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        "smiles": data.get("smiles", ""), # –ò—Å–ø–æ–ª—å–∑—É–µ–º .get() –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º data.get() –≤–º–µ—Å—Ç–æ data[] ---
        # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –ø–∞–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ "—Ñ–∞–∫—Ç" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
        "fact": data.get("fact", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
    }

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
st.set_page_config(layout="wide")
st.title("üé® –•–∏–º–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–Ω–∞–∂–µ—Ä —Å —Ä–µ–∂–∏–º–æ–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è")

with st.sidebar:
    st.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã")
    categories = list(chemical_data_full.keys())
    selected_category = st.selectbox("1. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", categories, index=0)
    
    selected_mode = st.radio(
        "2. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        ["–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (–ù–∞–∑–≤–∞–Ω–∏–µ -> –§–æ—Ä–º—É–ª–∞)", "–û–±—Ä–∞—Ç–Ω—ã–π (–§–æ—Ä–º—É–ª–∞ -> –ù–∞–∑–≤–∞–Ω–∏–µ)", "‚úçÔ∏è –†–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è (–ù–∞–∑–≤–∞–Ω–∏–µ -> –°—Ç—Ä—É–∫—Ç—É—Ä–∞)"],
        key="game_mode_selector"
    )

    if st.button("–ù–∞—á–∞—Ç—å / –°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É", use_container_width=True):
        reset_game(selected_category, selected_mode)
        st.rerun()

if not st.session_state.current_question:
    st.info("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Ä–µ–∂–∏–º –≤ –º–µ–Ω—é —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å / –°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É'.")
else:
    q = st.session_state.current_question
    mode = st.session_state.game_mode

    if mode == "‚úçÔ∏è –†–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è (–ù–∞–∑–≤–∞–Ω–∏–µ -> –°—Ç—Ä—É–∫—Ç—É—Ä–∞)":
        st.subheader("–ù–∞—Ä–∏—Å—É–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—É—é —Ñ–æ—Ä–º—É–ª—É –¥–ª—è:")
        st.info(f"## {q['name']}")
        
        smiles_drawn = st_ketcher(value=None, key="ketcher_canvas")
        
        if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∏—Å—É–Ω–æ–∫", use_container_width=True):
            if compare_smiles(smiles_drawn, q['smiles']):
                st.success("‚úÖ –ê–±—Å–æ–ª—é—Ç–Ω–æ –≤–µ—Ä–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")
                if q['name'] not in st.session_state.answered_questions:
                    st.session_state.answered_questions.append(q['name'])
            else:
                st.error("‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ–≤–µ—Ä–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            
            st.session_state.show_answer = True
            st.rerun()

        if st.session_state.show_answer:
            st.markdown(f"**üí° –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:** {q['fact']}")
            if st.button("–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", use_container_width=True):
                get_new_question(selected_category)
                st.rerun()
                
    else:
        col1, col2 = st.columns([2, 1.5])
        with col1:
            if mode == "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (–ù–∞–∑–≤–∞–Ω–∏–µ -> –§–æ—Ä–º—É–ª–∞)":
                st.write(f"–í–≤–µ–¥–∏—Ç–µ **{q['formula_type']}** —Ñ–æ—Ä–º—É–ª—É –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:")
                st.info(f"## {q['name']}")
                correct_answer = q['formula']
            else:
                st.write(f"–í–≤–µ–¥–∏—Ç–µ **–Ω–∞–∑–≤–∞–Ω–∏–µ** —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º—É–ª—ã:")
                st.info(f"## `{q['formula']}`")
                correct_answer = q['name']

            user_answer = st.text_input("–í–∞—à –æ—Ç–≤–µ—Ç:", key="user_input", disabled=st.session_state.show_answer)

            if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", disabled=st.session_state.show_answer, use_container_width=True):
                cleaned_user = user_answer.strip().upper().replace("-", "")
                cleaned_correct = correct_answer.strip().upper() if mode == "–û–±—Ä–∞—Ç–Ω—ã–π (–§–æ—Ä–º—É–ª–∞ -> –ù–∞–∑–≤–∞–Ω–∏–µ)" else correct_answer.strip().upper().replace("-", "")
                
                if cleaned_user == cleaned_correct:
                    st.success("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
                    if q['name'] not in st.session_state.answered_questions:
                        st.session_state.answered_questions.append(q['name'])
                else:
                    st.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: **{correct_answer}**")
                
                st.session_state.show_answer = True
                st.rerun()

            if st.session_state.show_answer:
                st.markdown(f"**üí° –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:** {q['fact']}")
                if st.button("–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", use_container_width=True):
                    get_new_question(selected_category)
                    st.rerun()
        with col2:
            st.subheader("–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å")
            total_questions = len(chemical_data_full[selected_category])
            answered_count = len(st.session_state.answered_questions)
            score = answered_count
            st.metric(label="–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤", value=f"{score} –∏–∑ {total_questions}")
            if total_questions > 0:
                progress = answered_count / total_questions
                st.progress(progress, text=f"{progress:.0%} –ø—Ä–æ–π–¥–µ–Ω–æ")
                if answered_count == total_questions:
                    st.balloons()
                    st.success("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é!")
